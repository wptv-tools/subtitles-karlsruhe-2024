1
00:00:08,700 --> 00:00:09,720
Gut.

2
00:00:10,700 --> 00:00:11,700
Es geht weiter.

3
00:00:12,250 --> 00:00:17,400
Der Christoph wird euch jetzt was über
Performance von Webseiten erzählen und wie

4
00:00:17,725 --> 00:00:20,600
man das hinbekommt mit 500.000
Attachments.

5
00:00:20,860 --> 00:00:21,860
Genau.

6
00:00:22,460 --> 00:00:24,381
Wundert euch nicht, die Folien sind auf
Englisch.

7
00:00:24,590 --> 00:00:27,445
Ich werde den Vortrag
nochmal auf Englisch

8
00:00:27,446 --> 00:00:30,881
halten, Ende nächsten
Monats in den Niederlanden.

9
00:00:32,600 --> 00:00:34,160
Den Vortrag halte ich aber auf Deutsch.

10
00:00:36,870 --> 00:00:43,998
Der Vortragstitel heißt, wie kriege ich
eine Webseite schnell, obwohl sie 500.

11
00:00:43,999 --> 00:00:45,261
000 Anhänger hat.

12
00:00:47,640 --> 00:00:52,520
Ich habe im Mai einen neuen Job angefangen
und das war mehr oder weniger so.

13
00:00:53,070 --> 00:00:54,670
Hier Christoph, das ist unsere Webseite.

14
00:00:55,510 --> 00:00:57,780
Wer reingucken will, das ist bonedo.de.

15
00:00:58,240 --> 00:01:01,440
Da kommt auch gleich zwischendurch noch
einmal ein Screenshot davon.

16
00:01:02,440 --> 00:01:03,780
Das ist ein Musikermagazin.

17
00:01:04,760 --> 00:01:06,960
Da sind viele, viele Bilder drin.

18
00:01:07,040 --> 00:01:12,600
Es sind, glaube ich, 200.000 Bilder und
300.000 Audio-Files.

19
00:01:13,720 --> 00:01:16,360
Das Frontend war adäquat schnell.

20
00:01:19,640 --> 00:01:27,240
Es ist halt schön mit Caching,
mit allem Zipp und Zappel.

21
00:01:27,320 --> 00:01:28,320
Also das Frontend...

22
00:01:30,560 --> 00:01:31,400
Achso, das sind die da hinten.

23
00:01:31,500 --> 00:01:31,660
Okay.

24
00:01:32,160 --> 00:01:33,520
Wir haben keine Audio-Probleme.

25
00:01:33,521 --> 00:01:36,920
Wir haben Audio-Probleme, die kommen da
hinten von dem anderen Track.

26
00:01:39,040 --> 00:01:43,520
Ja, Problem war, das Frontend war schnell,
das Backend nicht.

27
00:01:44,660 --> 00:01:45,676
Fangen wir doch erstmal mit mir an.

28
00:01:45,700 --> 00:01:46,820
Wer bin ich denn eigentlich?

29
00:01:47,300 --> 00:01:48,300
Ich bin der Christoph.

30
00:01:48,735 --> 00:01:51,980
Ich bezeichne mich als WordPress- und PHP
-Spezialist.

31
00:01:52,900 --> 00:01:57,156
Ich habe Ende der 90er
angefangen, irgendwas mit Web

32
00:01:57,157 --> 00:02:00,920
zu machen und habe da
auch erste Projekte gestartet.

33
00:02:02,460 --> 00:02:08,860
Eins davon existiert heute noch und ist in
seiner Nische nach wie vor führend.

34
00:02:10,350 --> 00:02:16,040
Im Laufe meiner Karriere habe ich unter
anderem an Projekten gearbeitet,

35
00:02:16,450 --> 00:02:20,120
die mehrere Millionen Page-Impressions pro
Monat hatten.

36
00:02:20,960 --> 00:02:24,817
Und da habe ich von
Teamentwicklung über

37
00:02:24,818 --> 00:02:29,461
Architekturplanung und so
weiter ziemlich alles gemacht.

38
00:02:29,555 --> 00:02:32,960
Und ich arbeite jetzt in Iserlohn für eine
kleine Agentur.

39
00:02:34,550 --> 00:02:36,301
Ihr findet mich auf
LinkedIn, wenn ihr mir folgen

40
00:02:36,302 --> 00:02:38,601
wollt, wenn ich mal irgendwelchen
Content posten würde.

41
00:02:40,590 --> 00:02:42,860
So, ich nehme jetzt mal hier das Dings
rein.

42
00:02:43,680 --> 00:02:47,800
Ja, das Projekt, ich hatte gerade schon
gesagt, es heißt bonedo.de.

43
00:02:49,370 --> 00:02:55,340
Es wurde ursprünglich als TYPO3 gestartet,
2020 als WordPress neu gestartet.

44
00:02:56,210 --> 00:02:59,160
Wir haben ungefähr 30.000 Projekte
gestartet.

45
00:02:59,210 --> 00:03:00,900
Posts in unterschiedlichen Post-Types.

46
00:03:01,990 --> 00:03:04,860
Und wie gesagt... ach, guck mal,
es war falsch rum.

47
00:03:05,380 --> 00:03:08,520
250.000 Audios und 300.000 Bilder.

48
00:03:09,860 --> 00:03:13,400
Und Frontend-Speed okay, Backend-Speed
terrible.

49
00:03:14,530 --> 00:03:20,000
Und ich sollte auf der... ich sollte
irgendwo links klicken.

50
00:03:20,870 --> 00:03:23,620
So, wir haben hier ein paar Zahlen vorher.

51
00:03:24,570 --> 00:03:27,300
Die Folie kriegen wir am Ende nochmal mit
den Nachher-Zahlen.

52
00:03:28,250 --> 00:03:32,140
Der Heartbeat brauchte ungefähr
zweieinhalb Sekunden.

53
00:03:34,310 --> 00:03:36,320
Saving Post, ich habe gesagt terrible.

54
00:03:37,880 --> 00:03:42,540
Sagt, schmeißt mal Zahlen in den Raum,
was wie lange dauert es schätzungsweise,

55
00:03:42,620 --> 00:03:46,740
wenn ihr auf den Beitrag drückt,
bis der Beitrag gespeichert wurde.

56
00:03:47,140 --> 00:03:48,140
Irgendwelche Zahlen?

57
00:03:49,140 --> 00:03:52,800
Eine Minute ist verdammt gut, ist nah
dran, ein bisschen zu langsam.

58
00:03:53,365 --> 00:03:54,500
Es sind nur 40 Sekunden.

59
00:03:56,210 --> 00:03:59,920
Aber wenn ein Beitrag viele Bilder hat,
konnte der auch die Minute erreichen.

60
00:04:01,410 --> 00:04:03,640
Beitrag öffnen, acht Sekunden.

61
00:04:05,380 --> 00:04:06,940
Volleditierbar, 15 Sekunden.

62
00:04:08,290 --> 00:04:11,280
Und das sind wirklich so Zahlen,
wo wir gesagt haben...

63
00:04:11,281 --> 00:04:19,060
Ja, wir haben ein Feedback-Tool im Backend
und da hat uns ein Redaktionsleiter auch

64
00:04:19,260 --> 00:04:21,400
bitterböse Mails drüber geschickt.

65
00:04:22,490 --> 00:04:24,480
Der hat am Ende über das...
Der hat am Ende über das...

66
00:04:24,481 --> 00:04:26,760
Über eine E-Mail an den PO geschickt.

67
00:04:27,490 --> 00:04:29,491
Boah geil, was habt ihr denn mit der Seite
gemacht?

68
00:04:29,970 --> 00:04:32,171
So schnell ist die Seite im Relaunch nicht
mehr gewesen.

69
00:04:33,980 --> 00:04:35,040
Das ging runter wie Öl.

70
00:04:35,060 --> 00:04:37,289
Nicht nur für mich, auch
für den PO, denn der PO

71
00:04:37,290 --> 00:04:39,640
hatte schon zwischendurch
Angst vor der Redaktion.

72
00:04:41,760 --> 00:04:43,520
So, worüber wir hier nicht sprechen.

73
00:04:44,950 --> 00:04:49,900
Frontend Caching, Object Caching,
Server Setup und Scaling.

74
00:04:51,020 --> 00:04:53,000
Das ist alles vorher da gewesen.

75
00:04:53,440 --> 00:04:54,460
Das habe ich nicht angefangen.

76
00:04:54,461 --> 00:04:56,440
In Großteil.

77
00:04:56,940 --> 00:04:58,700
Eine kleine Änderung.

78
00:04:58,840 --> 00:05:00,841
Wir haben ein bisschen was am Server Setup
gemacht.

79
00:05:01,640 --> 00:05:04,014
Aber das sind Sachen,
die ich nach draußen

80
00:05:04,015 --> 00:05:06,380
herausgegeben habe, wo
wir das Ops-Team haben.

81
00:05:06,940 --> 00:05:09,960
Und das habe ich in dem Detail nicht
angefasst.

82
00:05:10,040 --> 00:05:12,900
Das heißt, wer das hören wollte,
ist hier falsch.

83
00:05:13,260 --> 00:05:15,660
Aber wir werden schon definitiv was finden
für euch.

84
00:05:16,980 --> 00:05:17,980
So.

85
00:05:19,500 --> 00:05:19,980
Topics.

86
00:05:20,350 --> 00:05:21,350
Es gibt einen Punkt Null.

87
00:05:22,230 --> 00:05:24,040
WordPress Plugins für Profiling.

88
00:05:24,041 --> 00:05:25,920
Das sind die Topics, über die wir
sprechen.

89
00:05:27,310 --> 00:05:28,310
Eine kleine Einung.

90
00:05:31,075 --> 00:05:38,900
Für die Spannungskurve habe ich die Folie
8 und vor die Folie 6 und 7 gezogen.

91
00:05:39,910 --> 00:05:41,191
Ihr werdet nachher sehen, warum.

92
00:05:42,320 --> 00:05:43,320
So.

93
00:05:43,750 --> 00:05:46,660
WordPress Plugins fürs Profiling und für
Debugging.

94
00:05:47,990 --> 00:05:51,080
Keine großen unbekannten.

95
00:05:51,081 --> 00:05:52,081
Query Monitor.

96
00:05:52,160 --> 00:05:52,600
Debugbar.

97
00:05:52,601 --> 00:05:53,900
Debugbar Actions.

98
00:05:54,190 --> 00:05:55,190
Filter Add-on.

99
00:05:55,400 --> 00:05:56,400
Rewrite Rules Inspector.

100
00:05:58,500 --> 00:06:01,300
Die haben an vielen Stellen verdammt gute
Dienste gemacht.

101
00:06:02,120 --> 00:06:05,420
Aber sie haben mir halt nicht bis zum Ende
geholfen.

102
00:06:06,460 --> 00:06:07,460
Die helfen.

103
00:06:09,540 --> 00:06:11,141
Viel mehr will ich dazu gar nicht sagen.

104
00:06:11,800 --> 00:06:11,960
So.

105
00:06:12,080 --> 00:06:14,260
Beim Heartbeat haben wir ein bisschen
optimiert.

106
00:06:15,585 --> 00:06:19,890
Und zwar habe ich den Heartbeat runtergestellt,
dass er nicht ganz so oft abfeuert.

107
00:06:20,100 --> 00:06:21,280
Weil er halt viel lädt.

108
00:06:23,490 --> 00:06:24,940
Und realistisch gesehen wenig tut.

109
00:06:26,180 --> 00:06:29,480
Im Frontend habe ich ihn für ziemlich
nutzlos gehalten.

110
00:06:29,540 --> 00:06:32,460
Deswegen habe ich ihn im Frontend auf eine
Stunde hochgezogen.

111
00:06:34,550 --> 00:06:38,560
Dazu hatte ich gefunden, dass es das
Plugin Debugbar Control gibt.

112
00:06:38,710 --> 00:06:40,540
Was mittlerweile zu WP Rocket gehört.

113
00:06:41,260 --> 00:06:48,860
Und anhand der Forumsartikel als ziemlich
unmaintained darstellt.

114
00:06:49,365 --> 00:06:51,820
Ich habe einfach nur ein paar Fragmente
rausgenommen.

115
00:06:52,070 --> 00:06:53,940
Bei uns eingebaut.

116
00:06:54,700 --> 00:06:57,720
Details findet ihr in dem Gist auf meinem
Profil.

117
00:06:58,390 --> 00:06:59,390
Oder im QR-Code.

118
00:07:02,410 --> 00:07:03,470
Hier kommt jetzt eine Folie.

119
00:07:03,490 --> 00:07:05,530
Wenn ich die wirklich umgesetzt hätte.

120
00:07:07,250 --> 00:07:10,550
Das hätte mir einen Schritt am Ende
gespart.

121
00:07:11,330 --> 00:07:16,230
Dieses ganz wunderbare Plugin Index WP
MySQL for Speed.

122
00:07:17,880 --> 00:07:22,750
Das haut Indizes insbesondere auf die
Postmeta-Tabelle drauf.

123
00:07:25,010 --> 00:07:29,990
Das habe ich durch Recherche und
Unterhaltung gefunden.

124
00:07:30,385 --> 00:07:34,230
Das wurde mir von einem sehr guten Freund
Hendrik Lösen empfohlen.

125
00:07:37,390 --> 00:07:39,550
Das hätte viel geholfen.

126
00:07:40,035 --> 00:07:42,236
Wir haben es auf vielen Projekten auch
schon im Einsatz.

127
00:07:42,850 --> 00:07:44,670
In dem Projekt war es nicht aktiviert.

128
00:07:46,590 --> 00:07:48,546
Wenn ihr es noch nicht installiert habt,
evaluiert es.

129
00:07:48,570 --> 00:07:49,570
Das hilft.

130
00:07:51,310 --> 00:07:54,384
Was ich dann tatsächlich
an einigen Stellen gemacht

131
00:07:54,385 --> 00:07:57,010
habe, ist, ich habe
Custom Tables eingefügt.

132
00:07:57,630 --> 00:08:02,810
Das heißt, anstatt über Daten in der
Postmeta zu gehen, habe ich eine eigene

133
00:08:02,811 --> 00:08:08,890
Tabelle angelegt, habe sie über den Filter
Post Clauses reingehängt und konnte

134
00:08:08,891 --> 00:08:11,650
dadurch Meta-Querys mit einem simplen Join
ersetzen.

135
00:08:12,360 --> 00:08:17,490
Das ist teilweise der Unterschied im
Faktor 10, Faktor 100 und mehr.

136
00:08:17,491 --> 00:08:20,440
Damit habe ich
streckenweise das Backend

137
00:08:20,441 --> 00:08:23,650
beschleunigt, streckenweise
das Frontend beschleunigt.

138
00:08:24,090 --> 00:08:29,610
Allerdings reden wir an der Stelle über
die Beschleunigung von Queries.

139
00:08:30,890 --> 00:08:33,935
Dadurch habe ich alle
Slow-Querys entfernt

140
00:08:33,936 --> 00:08:37,191
gekriegt, die mir vorher
debugbar angezeigt wurden.

141
00:08:40,730 --> 00:08:48,730
Dann wurde mir auch der Blog von Steffen
Dressler empfohlen.

142
00:08:49,480 --> 00:08:50,840
Der wuselt auch hier irgendwo rum.

143
00:08:50,870 --> 00:08:51,750
Ich glaube, hier sitzt er nicht.

144
00:08:51,840 --> 00:08:52,450
Steffen, bist du hier?

145
00:08:52,530 --> 00:08:54,090
Nein, da ist Steffen da drüben.

146
00:08:57,070 --> 00:09:01,210
Wir haben für ein Projekt, wo sie eine
WooCommerce-Seite mit einer Million

147
00:09:01,211 --> 00:09:07,511
Produkten online gestellt haben, ganz viel
an den Taxonomie-Updates rumgeschraubt.

148
00:09:08,890 --> 00:09:14,570
Im Nachhinein glaube ich, dass ich diesen
Schritt hätte sein lassen können,

149
00:09:15,490 --> 00:09:17,270
weil ich hinten raus etwas entfernt habe.

150
00:09:19,780 --> 00:09:23,890
Während ich das umgesetzt habe,
war das sehr sinnvoll, denn bei jedem

151
00:09:23,891 --> 00:09:28,190
Abspeichern werden im Zweifelsfall
Taxonomie-Updates gemacht.

152
00:09:29,140 --> 00:09:34,770
Deswegen, wenn ihr viele Taxonomien habt,
kann das verdammt viel bringen.

153
00:09:37,370 --> 00:09:41,611
Hier kommen wir jetzt genau dazu, warum
ich den Schritt 4 hätte sein lassen dürfen.

154
00:09:42,170 --> 00:09:44,550
Wir haben in unserem Projekt Legacy-Code
drin gehabt.

155
00:09:45,560 --> 00:09:52,590
Und diesen Legacy-Code zu entfernen,
dieser Legacy-Code hat etwa 10% Overhead

156
00:09:52,690 --> 00:09:55,150
bei jedem einzelnen Seitenaufruf
produziert.

157
00:09:56,220 --> 00:09:59,625
Das heißt, wenn ihr euer
eigenes Projekt durchguckt,

158
00:09:59,626 --> 00:10:03,230
guckt mal, was ist toter
Code oder ein totes Feature.

159
00:10:03,570 --> 00:10:04,610
Es ist ja kein toter Code.

160
00:10:04,960 --> 00:10:10,810
Der wurde ja benutzt und aufgerufen,
aber er hatte keine Funktion.

161
00:10:11,620 --> 00:10:13,170
In dem Fall wurde ein...

162
00:10:13,171 --> 00:10:19,090
Im Endeffekt, es war eine facettierte
Suche, wo man filtern hätte können.

163
00:10:20,010 --> 00:10:23,050
Und dafür wurden 1400 Taxonomien angelegt.

164
00:10:23,510 --> 00:10:28,690
Nicht 1400 Terms, es waren 1400
Taxonomien.

165
00:10:29,860 --> 00:10:30,860
Jedes Mal...

166
00:10:31,100 --> 00:10:32,710
Ich sehe, Thorsten lacht.

167
00:10:35,400 --> 00:10:36,455
Guckt den Unterschied
im Zweifelsfall, wenn

168
00:10:36,456 --> 00:10:38,891
ihr noch nicht versteht,
wie schlimm das ist.

169
00:10:39,120 --> 00:10:41,250
Wir haben es ausgebaut 10% schneller.

170
00:10:41,330 --> 00:10:42,330
Nur deswegen.

171
00:10:42,450 --> 00:10:43,850
Vor allem für ein kaputtes Feature.

172
00:10:44,700 --> 00:10:46,130
Das war verdammt wertvoll.

173
00:10:46,131 --> 00:10:49,030
Ja, aktueller Status.

174
00:10:50,020 --> 00:10:51,020
Viel Kleinkram.

175
00:10:52,060 --> 00:10:53,970
10, 20% Improvement.

176
00:10:54,645 --> 00:10:58,130
Aber wenn wir nochmal überlegen,
wir waren bei 40 Sekunden fürs Speichern.

177
00:10:58,645 --> 00:11:01,010
20% Improvement auf 40 Sekunden.

178
00:11:02,020 --> 00:11:04,510
Macht die Redaktion noch nicht happy.

179
00:11:07,620 --> 00:11:11,350
Jetzt kommen wir zu der rausgezogenen
Folie.

180
00:11:14,110 --> 00:11:16,110
Ich hatte ein Problem.

181
00:11:16,111 --> 00:11:20,376
Was sich am Ende
darauf gezeichnet hat, dass

182
00:11:20,377 --> 00:11:24,411
ich mit der Post-Meta-Tabelle
ein Problem habe.

183
00:11:25,560 --> 00:11:26,560
Dafür habe ich dann...

184
00:11:28,730 --> 00:11:29,930
Ich musste es erst mal finden.

185
00:11:30,280 --> 00:11:32,813
Dann habe ich geguckt,
wie ich es fixen kann

186
00:11:32,814 --> 00:11:36,191
und habe dafür auch
ein Track-Ticket eröffnet.

187
00:11:37,320 --> 00:11:41,590
Das ist bereits gematcht in Trunk und wird
im 6...

188
00:11:43,680 --> 00:11:45,110
In 6.7 im November draußen.

189
00:11:45,630 --> 00:11:49,930
Dann kann man rauskommen, dass man die
Funktion, die ich euch gleich zeige,

190
00:11:50,450 --> 00:11:55,310
oder das Query, was ich euch gleich zeige,
dass man das elegant umschiffen kann.

191
00:11:56,150 --> 00:12:00,870
Außer natürlich, man benutzt direkt WP
MySQL for Speed.

192
00:12:01,870 --> 00:12:02,910
Dann braucht man es nicht.

193
00:12:05,590 --> 00:12:07,370
So, dieses ganz wunderbare Query.

194
00:12:07,490 --> 00:12:08,490
Thorsten, du bist raus.

195
00:12:10,020 --> 00:12:10,750
Was schätzt ihr...

196
00:12:11,000 --> 00:12:13,270
Das sieht total harmlos aus.

197
00:12:13,520 --> 00:12:20,350
Was schätzt ihr bei 500.000 Attachments,
wie lange braucht dieses eine Query?

198
00:12:20,630 --> 00:12:21,630
Ich nehme...

199
00:12:24,790 --> 00:12:25,790
Wetten an.

200
00:12:26,800 --> 00:12:27,800
Zu lang ist richtig.

201
00:12:28,680 --> 00:12:30,070
Okay, wie viel zu lang?

202
00:12:32,990 --> 00:12:34,630
Komm, Thorsten, die anderen wollen nicht.

203
00:12:34,790 --> 00:12:35,790
Sag eine Zahl.

204
00:12:40,110 --> 00:12:44,310
Also es sind 500.000 Attachments in der
Datenbank.

205
00:12:50,490 --> 00:12:51,830
Es sind in Summe...

206
00:12:51,930 --> 00:12:53,950
Das ist der Hauptgrund für die 40
Sekunden.

207
00:12:53,951 --> 00:12:54,951
Das ist richtig.

208
00:12:56,790 --> 00:12:57,790
Verdammte 4 Sekunden.

209
00:12:58,470 --> 00:12:59,470
Für ein Query.

210
00:12:59,800 --> 00:13:03,470
Wenn dann 10 Attachments in dem Post drin
sind, weil eine Galerie drin ist,

211
00:13:03,660 --> 00:13:04,910
hast du deine 40 Sekunden.

212
00:13:08,040 --> 00:13:10,660
Ich habe... Oh, so weit
wollen wir noch nicht.

213
00:13:10,790 --> 00:13:15,741
Ich habe es dann am Ende so gelöst, dass
ich dafür eine Lookup-Tabelle gemacht habe.

214
00:13:17,460 --> 00:13:19,020
Und die über den...

215
00:13:19,700 --> 00:13:24,400
über... andere Hooks... oder
andere Hooks reingehängt habe.

216
00:13:24,985 --> 00:13:29,560
Und damit bin ich von 4 Sekunden auf 2
Millisekunden runtergekommen pro Request.

217
00:13:30,520 --> 00:13:34,139
Mit Index MySQL mit
dem Plugin kommen wir auf

218
00:13:34,140 --> 00:13:37,681
ungefähr die gleiche
Performance -Optimierung.

219
00:13:38,270 --> 00:13:39,436
Jetzt kommt die große Quizfrage.

220
00:13:39,460 --> 00:13:40,500
Wie habe ich das gefunden?

221
00:13:41,490 --> 00:13:43,420
Und zwar, ich habe es mit XhProf gefunden.

222
00:13:44,840 --> 00:13:49,160
Das Einzige ist, XhProf hat ein paar
Probleme.

223
00:13:50,230 --> 00:13:52,405
Es wird bei DDEV
zum Beispiel direkt mit

224
00:13:52,406 --> 00:13:55,641
ausgeliefert, wenn ihr
lokal mit DDEV installiert.

225
00:13:55,870 --> 00:13:59,080
Da müsst ihr nur sagen, DDEV XhProf habt
ihr direkt da.

226
00:14:01,610 --> 00:14:03,960
Das XhProf ist toll, wenn ich genau weiß,
was ich profile.

227
00:14:04,480 --> 00:14:08,260
Aber es zeigt mir eine beschissene
Übersicht.

228
00:14:09,300 --> 00:14:12,620
Es zeigt mir nicht, welche URL ich gerade
wirklich geöffnet habe.

229
00:14:12,700 --> 00:14:16,000
Und es zeigt mir auch nicht, was unter der
Haube sonst noch passiert ist.

230
00:14:16,570 --> 00:14:20,060
So sieht XhProf standardmäßig aus.

231
00:14:20,870 --> 00:14:28,720
Das heißt, ich habe hier meine Liste mit
kryptischen Hashes, welche Runs ich hatte.

232
00:14:29,385 --> 00:14:30,600
Und ein Run sieht so aus.

233
00:14:30,700 --> 00:14:35,440
Da steht überhaupt nichts drauf,
was da im Endeffekt passiert ist.

234
00:14:37,840 --> 00:14:45,840
Und hier sehe ich jetzt MySQL-Query hat
134.000 Mikrosekunden gedauert.

235
00:14:46,515 --> 00:14:50,420
Und das auf 360 Requests verteilt.

236
00:14:51,510 --> 00:14:53,757
Damit weiß ich, okay,
ich habe ein Problem in

237
00:14:53,758 --> 00:14:57,001
MySQL, aber ich weiß
noch lange nicht welches.

238
00:14:57,240 --> 00:15:03,960
Und dafür habe ich ein Toolset gebaut,
was genau diese fehlenden Sachen löst.

239
00:15:05,140 --> 00:15:09,700
Und ja, jetzt wird es lustig.

240
00:15:11,160 --> 00:15:12,600
Das kann man jetzt nicht mehr lesen.

241
00:15:12,930 --> 00:15:16,620
Das sind im Endeffekt die Log-Dateien,
die ich rausschreibe.

242
00:15:16,621 --> 00:15:21,160
Da stehen jetzt solche lustigen
Informationen drin, wie – das kriegen wir

243
00:15:21,161 --> 00:15:25,320
aber noch gefixt hier – hier stehen dann
Informationen drin, wann wurde der

244
00:15:25,321 --> 00:15:32,620
gestartet, wie lange hat der im Endeffekt
gedauert, welche URL wurde aufgerufen,

245
00:15:36,070 --> 00:15:40,040
wie viele Postvariablen, Referrer und so
weiter und so weiter.

246
00:15:43,300 --> 00:15:45,751
Da habe ich also schon
mal die Informationen

247
00:15:45,752 --> 00:15:48,560
aufgerufen, welche URL
wurde im Detail aufgerufen.

248
00:15:49,075 --> 00:15:51,200
Und hier unten, da haben wir den
Bösewicht.

249
00:15:51,825 --> 00:15:55,040
Hier steht jetzt gerade Delta 136
Sekunden.

250
00:15:56,680 --> 00:16:03,540
Und da kann ich mir jetzt angucken,
okay, dafür brauche ich diesen Hash.

251
00:16:03,760 --> 00:16:05,180
Kann ich direkt darauf klicken.

252
00:16:06,280 --> 00:16:09,025
Kleine Einschränkung, ich
habe mir noch nicht die Arbeit

253
00:16:09,026 --> 00:16:11,420
gemacht, dass das Teil
irgendwo ein Web-Interface hat.

254
00:16:12,230 --> 00:16:14,660
Ich kann es nur über ein Terminal
aufrufen.

255
00:16:17,160 --> 00:16:25,160
Aber, schon mal zwei Folien vorgegriffen,
das Ding ist Open Source auf GitHub und es

256
00:16:25,560 --> 00:16:27,860
ist zum Weiterentwickeln gedacht.

257
00:16:29,370 --> 00:16:31,210
Hier haben wir jetzt nämlich genau diesen
Fall.

258
00:16:31,400 --> 00:16:37,600
Hier habe ich jetzt den Fall, dass ich
hier sehe, okay, hier habe ich einen,

259
00:16:39,810 --> 00:16:42,540
hier habe ich zwei Screenshots
rausgezogen.

260
00:16:43,760 --> 00:16:45,280
Der erste ist aus dem hier.

261
00:16:45,640 --> 00:16:49,653
Der hat tatsächlich 16
Sekunden gebraucht, weil

262
00:16:49,654 --> 00:16:52,961
er für Curl Exec 15
Sekunden gebraucht hat.

263
00:16:53,175 --> 00:16:58,380
Und im zweiten sehe ich, dass Session
Start 16 Sekunden gewartet hat.

264
00:16:59,400 --> 00:17:01,080
Dazu kommen wir gleich, wofür das gut war.

265
00:17:04,230 --> 00:17:09,660
Dann habe ich einen Database-Log gemacht
und im Database-Log habe ich ihm

266
00:17:09,661 --> 00:17:15,800
beigebracht, speichere doch nur das ab,
was länger als 0,1 Sekunde dauert,

267
00:17:16,490 --> 00:17:20,100
kann man on demand mit der
Konfigurationsvariable definieren,

268
00:17:20,730 --> 00:17:22,920
dass man wirklich nur die problematischen
Dinger lockt.

269
00:17:23,680 --> 00:17:28,540
Was schnell ist, bei 360 Queries möchte
ich nur die 10 haben, die langsam sind.

270
00:17:30,360 --> 00:17:35,920
Parallel gibt es auch noch, also hier habe
ich genau, hier ist, wunderschön nochmal

271
00:17:35,921 --> 00:17:40,540
ein Screenshot von meinem, unserem Freund,
den ich euch gerade gezeigt habe.

272
00:17:41,200 --> 00:17:42,760
Und hier ist nochmal der Proof.

273
00:17:43,890 --> 00:17:49,160
Das Teil hat wirklich 6 Sekunden,
beziehungsweise 2,5 Sekunden gedauert,

274
00:17:49,360 --> 00:17:50,560
um zu laden.

275
00:17:54,010 --> 00:17:59,000
Ähnlich gibt es nochmal das Gleiche für
HTTP Requests.

276
00:17:59,900 --> 00:18:04,374
Für HTTP Requests muss dann
das Plugin Debugbar installiert

277
00:18:04,474 --> 00:18:07,180
sein und aktiviert sein, damit
er die Daten auslesen kann.

278
00:18:09,300 --> 00:18:13,180
Hier findet ihr das Toolset, wenn ihr es
benutzen wollt.

279
00:18:15,820 --> 00:18:19,880
Ich lasse die Folie eben einen kleinen
Moment hier stehen.

280
00:18:21,200 --> 00:18:25,280
Der Clou an der Sache war halt,
damit habe ich wirklich gefunden,

281
00:18:25,600 --> 00:18:28,260
was beim Abspeichern passiert.

282
00:18:28,560 --> 00:18:34,280
Denn wenn ihr im Editor, im Blog-Editor
auf Abspeichern drückt, dann ist das nicht

283
00:18:34,530 --> 00:18:35,640
wie beim Plastik-Editor.

284
00:18:36,610 --> 00:18:42,920
Ihr habt den einzigen Request und das Ding
lädt neu und das Ding ist da, sondern beim

285
00:18:42,921 --> 00:18:48,680
Abspeichern passieren je nachdem,
wie ihr euer WordPress aufgesetzt habt,

286
00:18:49,760 --> 00:18:57,760
schnell 10, 20 Requests unter der Haube,
die hin und her geschoben werden und was

287
00:18:57,761 --> 00:19:01,427
ich euch vorher gezeigt habe,
ihr habt keine Chance zu wissen,

288
00:19:01,428 --> 00:19:04,820
in welchem von den 10 Requests
ist jetzt gerade euer Problem.

289
00:19:08,230 --> 00:19:15,780
Und der letzte große Teil, was jetzt hier
ist, das, was ihr vorher gesehen hattet,

290
00:19:16,080 --> 00:19:20,280
Session Start, dass das dafür gesorgt hat,
dass wir so ein Ramp-up hatten,

291
00:19:21,160 --> 00:19:22,556
das Ding hat sich wirklich durchgezogen.

292
00:19:22,580 --> 00:19:26,200
Wir hatten also einen Request,
der lange gedauert hat und dann 16,

293
00:19:26,300 --> 00:19:31,200
16, 16, 16 Sekunden nur, weil die alle auf
Session Start gewartet haben.

294
00:19:31,910 --> 00:19:37,460
Und das konnte ich darauf zurückführen,
Session Start, wenn ich es standardmäßig

295
00:19:37,461 --> 00:19:44,940
laufen lasse, wartet bei Design darauf,
dass er schreiben darf und fertig.

296
00:19:46,050 --> 00:19:48,860
Das kommt in dem Fall von der Ninja
Firewall.

297
00:19:49,400 --> 00:19:51,742
Ich weiß nicht hundertprozentig,
ob es ein Seiteneffekt

298
00:19:51,743 --> 00:19:53,900
von irgendwas anderem
gewesen ist oder nicht.

299
00:19:56,450 --> 00:19:59,800
Als ich den Vortrag vor ein paar Wochen
auf der FrostCon gehalten habe,

300
00:20:00,000 --> 00:20:04,760
kam dann der Zwischenruf, ja, das ist bei
Design, dass Session Start wartet,

301
00:20:05,010 --> 00:20:09,520
weil eine PHP-Session soll ja wirklich
synchron sein.

302
00:20:11,220 --> 00:20:12,220
Okay, ja.

303
00:20:13,780 --> 00:20:16,076
Ich hatte aber ein Problem damit,
dass er wirklich gewartet hat,

304
00:20:16,100 --> 00:20:18,613
denn ich will ja nicht,
dass er darauf wartet und es

305
00:20:18,614 --> 00:20:21,020
waren keine kritischen
Informationen in der Session.

306
00:20:23,650 --> 00:20:24,650
Lange Rede, kurzer Sinn.

307
00:20:25,540 --> 00:20:27,820
Da kommt die eine Ausnahme zu der Folie am
Anfang.

308
00:20:28,260 --> 00:20:35,960
Wir haben ein Redis aufgesetzt und haben
die Session im Redis speichern lassen,

309
00:20:36,850 --> 00:20:42,740
wodurch wir das Problem komplett los
geworden sind, weil er dann jetzt nicht

310
00:20:42,865 --> 00:20:44,529
mehr gewartet hat,
bis der andere fertig

311
00:20:44,530 --> 00:20:48,021
gewesen ist, sondern
einfach durchgelaufen ist.

312
00:20:49,020 --> 00:20:52,040
Wir sind bei der Folie von vorhin.

313
00:20:52,880 --> 00:20:56,360
Wir waren bei zweieinhalb Sekunden.

314
00:20:56,480 --> 00:20:57,480
Was schätzt ihr?

315
00:20:58,200 --> 00:20:59,200
Wo sind wir jetzt?

316
00:21:00,440 --> 00:21:01,620
Die Hälfte.

317
00:21:03,160 --> 00:21:04,160
Nee, weniger.

318
00:21:04,220 --> 00:21:05,220
0,7.

319
00:21:06,320 --> 00:21:07,980
Saving a post, Thorsten.

320
00:21:12,730 --> 00:21:13,830
Post öffnen?

321
00:21:17,260 --> 00:21:18,260
Zwei hast du gesagt?

322
00:21:18,970 --> 00:21:20,090
War jetzt richtig.

323
00:21:20,470 --> 00:21:22,810
Du darfst dir ein gratis Getränk
unternehmen.

324
00:21:25,370 --> 00:21:26,570
Und voll editierbar?

325
00:21:30,400 --> 00:21:31,400
Bier.

326
00:21:32,970 --> 00:21:40,520
Und wie gesagt, nach den Änderungen,
die wir hier gemacht haben, hat einer aus

327
00:21:40,620 --> 00:21:43,580
der Redaktion, unserem PO, Bescheid
gesagt.

328
00:21:44,820 --> 00:21:45,980
Was habt ihr denn da gemacht?

329
00:21:46,130 --> 00:21:47,200
Das ist verdammt geil.

330
00:21:47,240 --> 00:21:50,180
So schnell war die Seite vorher noch
nicht.

331
00:21:52,680 --> 00:21:53,680
So.

332
00:21:53,930 --> 00:21:54,930
Die vorletzte Folie.

333
00:22:01,335 --> 00:22:04,610
Der Daniel hat ein Mikrofon und schießt
los.

334
00:22:10,780 --> 00:22:11,780
Hallo Christoph.

335
00:22:11,830 --> 00:22:14,720
Also erstmal Wahnsinn, dass du das so
hinbekommen hast.

336
00:22:14,900 --> 00:22:18,840
Also ich bin total baff, dass das jetzt so
wirklich runtergedrosselt ist.

337
00:22:19,520 --> 00:22:20,520
Ich habe eine Frage.

338
00:22:20,560 --> 00:22:22,720
Wir haben uns vorhin ein bisschen
unterhalten über ACF.

339
00:22:22,825 --> 00:22:26,740
Also ich weiß, ACF ist ein Performance-
Killer schlechthin, sagen wir mal so.

340
00:22:27,420 --> 00:22:31,160
Aber jetzt, wenn man das verwenden muss,
in der Hinsicht.

341
00:22:31,540 --> 00:22:35,440
Was ist deiner Meinung nach der beste Rat,
außer das Plugin jetzt irgendwie versuchen

342
00:22:35,441 --> 00:22:38,720
rauszuschmeißen, irgendwie das zu
optimieren?

343
00:22:38,780 --> 00:22:39,220
Also gibt's das?

344
00:22:39,340 --> 00:22:43,460
Irgendwas, was du von deiner Seite sagen
würdest, diese Einstellung musst du am

345
00:22:43,461 --> 00:22:48,020
besten vornehmen oder irgendwie in der
Datenbank optimieren, dass das zumindest

346
00:22:48,070 --> 00:22:50,733
von der Performance bei
größeren Webseiten mit,

347
00:22:50,734 --> 00:22:53,881
sagen wir mal, 10.000
Unterseiten oder etc.

348
00:22:54,330 --> 00:22:56,340
ein bisschen stabiler läuft.

349
00:22:57,000 --> 00:22:59,080
Ok, dazu direkt vorab.

350
00:22:59,570 --> 00:23:04,240
Ja, in dieser Seite läuft ACF und ich habe
es auch noch nicht hingekriegt,

351
00:23:04,510 --> 00:23:05,900
das rauszuschmeißen.

352
00:23:08,880 --> 00:23:12,360
Tatsächlich einige der
Daten, die ich dort drin

353
00:23:12,361 --> 00:23:15,420
habe, habe ich redundant
in der Datenbank drin.

354
00:23:15,540 --> 00:23:23,380
Das heißt, ich habe sie, ich lasse sie
über ACF ganz normal in der Postmeta

355
00:23:23,381 --> 00:23:30,820
speichern und speichere sie mir redundant
über einen Filter in einer Custom Table.

356
00:23:30,940 --> 00:23:36,020
Das heißt, ich habe zum Beispiel einen
Flag, was heißt hide on irgendwas,

357
00:23:36,240 --> 00:23:38,860
ich weiß nicht mehr, hide this post.

358
00:23:39,830 --> 00:23:42,880
Das habe ich redundant nochmal in der
zusätzlichen Tabelle gespeichert,

359
00:23:43,030 --> 00:23:46,195
um loszuwerden, dass
ich dafür ein Meta -Query

360
00:23:46,196 --> 00:23:49,781
machen kann, sondern
wirklich ein 1 zu 1 Join.

361
00:23:50,670 --> 00:23:57,680
Ebenso wird in dieser Meta-Tabelle zum
Beispiel, gibt es ein Flag, das ein

362
00:23:57,681 --> 00:24:01,580
Artikel, ein sogenannter Container-Artikel
ist, das heißt, da gibt es dann noch unter

363
00:24:01,581 --> 00:24:06,200
Artikel dazu und dass nur Container
-Artikel dort angezeigt werden.

364
00:24:06,860 --> 00:24:07,920
Das ist nicht ideal.

365
00:24:08,180 --> 00:24:12,714
Ich habe noch keine 100% lösung
an der Stelle für ACF gefunden

366
00:24:12,715 --> 00:24:15,480
und ich habe mich auch
noch nicht tief da reingearbeitet.

367
00:24:17,010 --> 00:24:22,780
Mein Kritikpunkt, den ich nach
dreieinhalb, vier Monaten ich muss mit ACF

368
00:24:22,930 --> 00:24:26,980
kämpfen habe, ist, ACF macht das Leben
viel zu einfach.

369
00:24:28,135 --> 00:24:33,860
Und das ist definitiv mein Rat,
wenn ihr ACF benutzt, nicht erst drauf

370
00:24:33,861 --> 00:24:38,520
losklicken und dann überlegen,
sondern erst überlegen und dann lösen.

371
00:24:38,660 --> 00:24:40,640
Egal, ob mit ACF oder sonst was.

372
00:24:40,900 --> 00:24:45,580
Denn das Problem ist, ACF macht es so
einfach, dass ich eine Lösung

373
00:24:45,805 --> 00:24:51,220
zusammengeklickt habe, die ich vielleicht
mit einem Gedankengang auf einer anderen

374
00:24:51,221 --> 00:24:53,901
irgendwie anders
abgespeichert hätte oder vielleicht

375
00:24:53,902 --> 00:24:56,441
komplett anders gelöst hätte
und gar nicht gebraucht hätte.

376
00:24:56,900 --> 00:24:59,943
Das ist mein Rat an der
Stelle für im Endeffekt nicht

377
00:24:59,944 --> 00:25:03,960
nur für ACF, sondern für
jedes Clicky-Bunty-Tool.

378
00:25:05,840 --> 00:25:09,220
Wenn es zu einfach ist, macht man manchmal
eine zu schnelle Lösung.

379
00:25:11,060 --> 00:25:12,060
Frage beantwortet.

380
00:25:14,350 --> 00:25:16,880
Hallo Christoph, danke erst für den
Vortrag.

381
00:25:17,080 --> 00:25:18,200
Wirklich beeindruckend.

382
00:25:19,380 --> 00:25:23,160
Mich würde interessieren, wie lange hast
du dafür Invest gebraucht, also wie viel

383
00:25:23,161 --> 00:25:26,260
Zeitaufwand war das für dich, um da
wirklich dahinter zu kommen und das dann

384
00:25:26,610 --> 00:25:27,610
so hinzubekommen?

385
00:25:27,960 --> 00:25:28,560
Das ist...

386
00:25:28,860 --> 00:25:32,680
Die Frage ist an der Stelle nicht
hundertprozentig zu beantworten.

387
00:25:32,720 --> 00:25:40,020
Es war halt, wie gesagt, da ist Onboarding
mit drin, ins Projekt reinkommen,

388
00:25:40,120 --> 00:25:43,600
das heißt ich bin wirklich komplett
niegelnagelneu ins Projekt rein.

389
00:25:45,485 --> 00:25:49,860
Ich glaube, nach zwei Monaten um den Dreh
war ich an dem Punkt...

390
00:25:50,610 --> 00:25:56,000
Ich habe am Anfang wirklich einfach im
Nebel gestochert und diesen Kleinkram wie

391
00:25:56,001 --> 00:25:59,520
Meta -Querys rausgeschmissen und so
weiter.

392
00:26:00,410 --> 00:26:03,057
Das hat natürlich in
gewisser Weise geholfen,

393
00:26:03,058 --> 00:26:05,821
war aber ein Tropfen
auf den heißen Stein.

394
00:26:08,280 --> 00:26:13,460
Ich gucke gleich nach und sage dir eine
definitive Antwort, aber roundabouts nach

395
00:26:13,635 --> 00:26:20,880
zwei bis drei Monaten, die allerdings,
wie gesagt, Start beim neuen Arbeitgeber

396
00:26:20,881 --> 00:26:24,700
und Onboarding in einem niegelnagelneuen
Projekt beinhaltet haben.

397
00:26:27,200 --> 00:26:28,320
Da hinter dir ist noch eine.

398
00:26:30,170 --> 00:26:33,480
Eine Frage, also gibt es vielleicht noch
von deiner Seite, wenn man jetzt ein

399
00:26:33,481 --> 00:26:36,880
Caching -Plugin nehmen muss,
gegebenenfalls eine Empfehlung,

400
00:26:36,995 --> 00:26:41,457
was du sagen könntest, das
könnte man verwenden, ohne jetzt

401
00:26:41,458 --> 00:26:44,820
viel Schnickschnack irgendwo
auf dem Server zu konfigurieren?

402
00:26:47,720 --> 00:26:50,600
Darf ich bezahlte Plugins nennen hier,
Thomas?

403
00:26:53,380 --> 00:26:55,260
Nein, das ist nicht im Repository.

404
00:26:56,200 --> 00:27:01,701
Ich benutze gerne ein bezahltes Plugin, was
so ein ähnliches Logo hat wie meine Firma.

405
00:27:04,040 --> 00:27:05,400
Da ist das Logo nicht drauf.

406
00:27:09,300 --> 00:27:11,480
Ja, wir benutzen WP Rocket.

407
00:27:14,485 --> 00:27:18,920
Ob das jetzt die finale Empfehlung ist
oder nicht, ich kann dir an der Stelle

408
00:27:18,921 --> 00:27:22,940
folgendes sagen, ich habe mal W3 Total
Cache benutzt.

409
00:27:23,930 --> 00:27:28,060
W3 Total Cache ist super, allerdings ist
es so kompliziert zu konfigurieren,

410
00:27:28,140 --> 00:27:34,060
dass ich mir ganz wunderbar damit in den
Fuß geschossen habe und die Konfiguration

411
00:27:34,061 --> 00:27:37,980
dafür gesorgt hat, dass ich bestimmte
Seiten nicht mehr aus dem Browser Cache

412
00:27:38,105 --> 00:27:40,360
meiner Anwender gekriegt habe.

413
00:27:41,320 --> 00:27:45,457
Also von daher, W3 Total
Cache ist fein, mit der Gefahr,

414
00:27:45,458 --> 00:27:48,260
man kann sich damit ganz
wunderbar ins Knie schießen.

415
00:27:59,040 --> 00:27:59,920
Danke für den Vortrag.

416
00:28:00,020 --> 00:28:01,020
Sehr interessant.

417
00:28:01,260 --> 00:28:01,880
Hast du noch eine Frage?

418
00:28:01,900 --> 00:28:05,940
Hast du noch eine Idee, was bei dem Fully
Editable, das waren 15 Sekunden,

419
00:28:06,095 --> 00:28:09,440
doch 15 Sekunden war es, was da
ausschlaggebend war?

420
00:28:09,610 --> 00:28:11,566
Ist das nur bei Posts
mit vielen Attachments

421
00:28:11,567 --> 00:28:13,980
schon drin oder das war
halt quasi dann die Meta?

422
00:28:14,330 --> 00:28:21,400
Also was bei dem Fully Editable durchaus
auch mit geschlagen hat, ist die Kollegen

423
00:28:24,490 --> 00:28:32,240
haben Blocks mit ACF gebaut, die natürlich
auch sehr reingeschlagen haben und da sind

424
00:28:32,241 --> 00:28:38,260
wir noch dran, um einige davon in native
Blöcke, in custom Blöcke komplett

425
00:28:38,261 --> 00:28:44,660
umzuwandeln und Fully Editable habe ich an
der Stelle definiert als keine Eieruhr,

426
00:28:44,720 --> 00:28:51,980
weil irgendwas sei es Taxonomies oder
Impost hat noch gelaufen.

427
00:28:52,700 --> 00:28:54,480
Das war für mich Fully Editable.

428
00:28:55,330 --> 00:28:59,520
Da weiß ich definitiv, die ACF Blöcke
waren ein Problem.

429
00:29:00,240 --> 00:29:01,240
Ja, okay.

430
00:29:01,340 --> 00:29:04,440
Dann nur noch eine Sache, die ich im
letzten halben Jahr gelernt habe für das

431
00:29:04,790 --> 00:29:06,980
Debuggen oder Profilen von PHP Requests.

432
00:29:07,080 --> 00:29:09,980
Ich weiß nicht, sagt dir die Exima PHP
Extension etwas?

433
00:29:10,200 --> 00:29:10,340
Nein.

434
00:29:10,570 --> 00:29:12,050
Das ist von der Wikimedia Foundation.

435
00:29:12,220 --> 00:29:16,120
Das ist eine Alternative zu Xdebug
Profiling oder XhProf.

436
00:29:16,720 --> 00:29:20,660
Wenn du etwas lokal nachstellen kannst,
dann kannst du die auch verwenden,

437
00:29:20,680 --> 00:29:23,386
um es zu debuggen oder wenn
du über die Cloud irgendwie quasi

438
00:29:23,387 --> 00:29:25,781
kompletten Zugriff hast,
kannst du es auch da installieren.

439
00:29:25,840 --> 00:29:29,040
Das ist irgendwas, was ich jedem empfehlen
würde, der etwas debuggen muss oder möchte.

440
00:29:29,520 --> 00:29:30,380
Also lass dich mal anzuschauen.

441
00:29:30,480 --> 00:29:32,560
Also mir war es völlig neu, gibt es aber
seit Jahren.

442
00:29:33,900 --> 00:29:36,600
Exima von Wikipedia, Wikimedia.

443
00:29:38,260 --> 00:29:39,260
Super, danke dir.

444
00:29:40,040 --> 00:29:41,520
Da hinten haben wir noch eine Hand.

445
00:29:42,410 --> 00:29:43,890
Thomas, wie viel Zeit haben wir noch?

446
00:29:46,120 --> 00:29:47,120
Ja, danke.

447
00:29:47,840 --> 00:29:49,000
Ich habe eine Frage.

448
00:29:49,200 --> 00:29:54,720
Dieses Tool, was ihr gemacht, also entwickelt
habt, das ist total nice, total cool.

449
00:29:56,420 --> 00:30:01,890
Also muss man dafür für
ganze VM, Zugriff haben oder

450
00:30:01,891 --> 00:30:10,900
reicht es von der Nutzung
von Hosting Interfaces?

451
00:30:11,390 --> 00:30:15,580
Um das Toolset benutzen zu können,
brauchst du zwingend xhProf.

452
00:30:17,040 --> 00:30:19,720
Und Shell Zugang im aktuellen Zugang.

453
00:30:19,975 --> 00:30:25,340
Das heißt, hast du bei deinem Hosting und
wenn du bei deinem Hoster das hättest,

454
00:30:25,810 --> 00:30:28,322
was ich bezweifle,
dass ein Standard Hoster

455
00:30:28,323 --> 00:30:31,321
das mitliefern wird,
könntest du das benutzen.

456
00:30:31,720 --> 00:30:35,129
Ich habe das explizit nur
auf meiner lokalen Kopie

457
00:30:35,130 --> 00:30:38,840
benutzt, weil jedes Profiling
Tool produziert Overhead.

458
00:30:39,390 --> 00:30:42,696
Dementsprechend würde ich
das, sofern es nicht zwingend

459
00:30:42,756 --> 00:30:45,640
notwendig ist, nie auf ein
Produktivsystem einsetzen.

460
00:30:46,820 --> 00:30:51,720
Wie gesagt, für die lokale Entwicklung
benutzen wir DDEV und bei DDEV kommt das

461
00:30:51,845 --> 00:30:58,200
direkt mit, weswegen ich dort nur die
entsprechende Datei austauschen musste.

462
00:30:58,960 --> 00:31:01,680
Details, wie man das installieren muss,
steht auf der Seite.

463
00:31:05,970 --> 00:31:07,010
Ich sehe keine Hände mehr.

464
00:31:08,080 --> 00:31:09,760
Zeit für eine Frage haben wir noch.

465
00:31:10,430 --> 00:31:11,470
Eine Frage haben wir noch.

466
00:31:12,020 --> 00:31:12,420
Keine?

467
00:31:12,900 --> 00:31:13,900
Daniel, du auch keine?

468
00:31:15,270 --> 00:31:16,950
Dann danke ich euch für die
Aufmerksamkeit.

